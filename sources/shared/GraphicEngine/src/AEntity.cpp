/********************************************************************
**
**              AEntity.cpp
**              Created by : Vial Joris
**
********************************************************************/

#include "AEntity.hpp"

namespace VoidClashGraphics
{
    /////////////////////////////////////////////////////////////////////
    /////	Ctor/Dtor
    /////////////////////////////////////////////////////////////////////

    AEntity::AEntity(void)
    {
        _good = false;
        _skipThisFrame = false;
        _gameObject = NULL;
    }

    AEntity::~AEntity(void)
    {

    }

    /////////////////////////////////////////////////////////////////////
    /////	Copy entity into this
    /////////////////////////////////////////////////////////////////////

    void AEntity::set(AEntity *entity)
    {
        if (entity == NULL)
        {
            _good = false;
            return;
        }

        _good = entity->_good;
        _gameObject = entity->_gameObject;
    }

    /////////////////////////////////////////////////////////////////////
    /////	Default start
    /////////////////////////////////////////////////////////////////////

    void AEntity::start(void)
    {

    }

    /////////////////////////////////////////////////////////////////////
    /////	Default stop
    /////////////////////////////////////////////////////////////////////

    void AEntity::stop(void)
    {
        _gameObject = NULL;
        _good = false;
    }

    /////////////////////////////////////////////////////////////////////
    /////	Default update
    /////////////////////////////////////////////////////////////////////

    void AEntity::update(float deltatime)
    {
        (void)deltatime;

        _skipThisFrame = false;
    }

    /////////////////////////////////////////////////////////////////////
    /////	Render non post-processed stuff
    /////////////////////////////////////////////////////////////////////

    void AEntity::postRendering(float deltatime, float renderPass)
    {
        (void)deltatime;
        (void)renderPass;
    }

    /////////////////////////////////////////////////////////////////////
    /////	Set the game object
    /////////////////////////////////////////////////////////////////////

    void AEntity::setGameObject(const std::shared_ptr<AObject> &gameObject)
    {
        _gameObject = gameObject;
    }

    /////////////////////////////////////////////////////////////////////
    /////	Get the game object
    /////////////////////////////////////////////////////////////////////

    const std::shared_ptr<AObject>& AEntity::getGameObject(void)
    {
        return _gameObject;
    }

	/////////////////////////////////////////////////////////////////////
	/////	Set the event
	/////////////////////////////////////////////////////////////////////

	void AEntity::setEvent(std::pair<eventType, s_event> *event)
	{
		_event = event;
	}
	
	/////////////////////////////////////////////////////////////////////
    /////	Is the entity ready to use
    /////////////////////////////////////////////////////////////////////

    bool AEntity::good(void)
    {
        return _good;
    }

    /////////////////////////////////////////////////////////////////////
    /////	Do we have to display the entity this frame
    /////////////////////////////////////////////////////////////////////

    bool AEntity::skipThisFrame(void)
    {
        return _skipThisFrame;
    }

    /////////////////////////////////////////////////////////////////////
    /////	Check the GameObject status
    /////////////////////////////////////////////////////////////////////

    bool AEntity::checkParent(void)
    {
        if (_gameObject == NULL)
        {
            _good = false;
            return false;
        }

        return true;
    }

    /////////////////////////////////////////////////////////////////////
    /////	Check the ower state
    /////////////////////////////////////////////////////////////////////

    bool AEntity::checkOwner(void)
    {
        if (_gameObject != NULL && _gameObject->getOwner() == NULL)
        {
            _good = false;
            return false;
        }
        return true;
    }

    /////////////////////////////////////////////////////////////////////
    /////	Get the instances values
    /////////////////////////////////////////////////////////////////////

    float AEntity::getFloat(void)
    {
        return _float;
    }

    const glm::mat4& AEntity::getMatrix(void)
    {
        return _matrix;
    }

    const glm::vec4& AEntity::getVec4(void)
    {
        return _vec4;
    }

    const glm::vec2& AEntity::getVec2(void)
    {
        return _vec2;
    }

    /////////////////////////////////////////////////////////////////////
    /////	Return the assetId to use
    /////////////////////////////////////////////////////////////////////

    unsigned int AEntity::getAssetId(void)
    {
        return COMMON_ASSET_ID;
    }

    /////////////////////////////////////////////////////////////////////
    /////	Set the camera
    /////////////////////////////////////////////////////////////////////

    void AEntity::setCamera(ogl::Camera *camera)
    {
        _camera = camera;
    }
}
